{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vicki's Markdown Playground \u00b6 Enter at your own risk!!! \u00b6","title":"Home"},{"location":"#vickis-markdown-playground","text":"","title":"Vicki's Markdown Playground"},{"location":"#enter-at-your-own-risk","text":"","title":"Enter at your own risk!!!"},{"location":"CreateSnapshot/","text":"Create Snapshot of Digital Ocean Droplet \u00b6 Snapshots are on-demand disk images of DigitalOcean Droplets saved to your account. Snapshots may be made with the Droplet powered off or left on. The recommendation is to power it off before creating the snapshot. Log into https://cloud.digitalocean.com/ In the right top corner, select the correct team. For most customer mittos this should be the zuar team. Click the correct Droplet to go to its detail page. Click Power in the Droplet's left menu. Click the Turn off button. If not shutting down, proceed to step 7. Click the Turn off button button on the popup window and wait until you see Turn on Droplet on the page. This indicates that the Droplet has been powered off. Once the Droplet is powered off, click Snapshots in Droplet\u2019s left menu. Click the \"Take snapshot\" button. Once the snapshot is finished, you will see it listed in the Droplet snapshots window. **There is a cost associated with a Droplet whether it is shut down or active. There is also an additional cost associate with a snapshot.","title":"CreateSnapshot"},{"location":"CreateSnapshot/#create-snapshot-of-digital-ocean-droplet","text":"Snapshots are on-demand disk images of DigitalOcean Droplets saved to your account. Snapshots may be made with the Droplet powered off or left on. The recommendation is to power it off before creating the snapshot. Log into https://cloud.digitalocean.com/ In the right top corner, select the correct team. For most customer mittos this should be the zuar team. Click the correct Droplet to go to its detail page. Click Power in the Droplet's left menu. Click the Turn off button. If not shutting down, proceed to step 7. Click the Turn off button button on the popup window and wait until you see Turn on Droplet on the page. This indicates that the Droplet has been powered off. Once the Droplet is powered off, click Snapshots in Droplet\u2019s left menu. Click the \"Take snapshot\" button. Once the snapshot is finished, you will see it listed in the Droplet snapshots window. **There is a cost associated with a Droplet whether it is shut down or active. There is also an additional cost associate with a snapshot.","title":"Create Snapshot of Digital Ocean Droplet"},{"location":"DockerCompose/","text":"Useful Docker-compose Commands \u00b6 At Zuar, we mostly use docker-compose instead of docker. It is helpful to create an alias for this command as follows: alias dc=\"/usr/local/bin/docker-compose\"_ You can find out where your docker-compose executable is using the which command as follows: which docker-compose_ To start docker and its containers and run it in the background: docker-compose up -d_ To see the running containers: docker-compose ps_ The output will look something like this: Name Command State Ports \u00b6 auth /app/entry_debug.sh /opt/p ... Up 127.0.0.1:10001->10001/tcp, 127.0.0.1:5756->5756/tcp db docker-entrypoint.sh postgres Up 5432/tcp mitto /app/entry.sh Exit 0 mitto_zwaf dockerize -timeout 1m -wai ... Up 0.0.0.0:443->443/tcp,:::443->443/tc p, 0.0.0.0:80->80/tcp,:::80->80/tcp scheduler /app/entry.sh /opt/pyenv/b ... Up 127.0.0.1:10003->10003/tcp vsftpd /app/entry.sh Exit 0 webapp /app/entry_debug.sh /opt/p ... Up 127.0.0.1:10002->10002/tcp, 127.0.0.1 : 7127 -> 7127 / tcp Each line of the output contains these fields: Name \u2013 The name of the container. Command \u2013 The command that is executed when starting the container. State \u2013 The status of the container. Ports \u2013 The container\u2019s published ports. To restart the container, do this: docker-compose down && docker-compose up -d_ You are going to need to view the logs in the docker container with this command: docker-compose logs -f_","title":"DockerCompose"},{"location":"DockerCompose/#useful-docker-compose-commands","text":"At Zuar, we mostly use docker-compose instead of docker. It is helpful to create an alias for this command as follows: alias dc=\"/usr/local/bin/docker-compose\"_ You can find out where your docker-compose executable is using the which command as follows: which docker-compose_ To start docker and its containers and run it in the background: docker-compose up -d_ To see the running containers: docker-compose ps_ The output will look something like this:","title":"Useful Docker-compose Commands"},{"location":"DockerCompose/#name-command-state-ports","text":"auth /app/entry_debug.sh /opt/p ... Up 127.0.0.1:10001->10001/tcp, 127.0.0.1:5756->5756/tcp db docker-entrypoint.sh postgres Up 5432/tcp mitto /app/entry.sh Exit 0 mitto_zwaf dockerize -timeout 1m -wai ... Up 0.0.0.0:443->443/tcp,:::443->443/tc p, 0.0.0.0:80->80/tcp,:::80->80/tcp scheduler /app/entry.sh /opt/pyenv/b ... Up 127.0.0.1:10003->10003/tcp vsftpd /app/entry.sh Exit 0 webapp /app/entry_debug.sh /opt/p ... Up 127.0.0.1:10002->10002/tcp, 127.0.0.1 : 7127 -> 7127 / tcp Each line of the output contains these fields: Name \u2013 The name of the container. Command \u2013 The command that is executed when starting the container. State \u2013 The status of the container. Ports \u2013 The container\u2019s published ports. To restart the container, do this: docker-compose down && docker-compose up -d_ You are going to need to view the logs in the docker container with this command: docker-compose logs -f_","title":"Name                 Command               State                   Ports"},{"location":"Tcpdump%20Howto/","text":"Tcpdump Howto \u00b6 Shows traffic on interface eth0 on port 8080 \u00b6 tcpdump - i eth0 tcp port 8080 - vv - X_ - i interface - vv very verbose output - X show both HEX and ASCII Shows traffic going to or coming from the host IP \u00b6 tcpdump host 10.0.0.10_ Shows traffic coming from 10.0.0.10 \u00b6 tcpdump src 10.0.0.10_ Shows traffic going to 10.0.0.10 \u00b6 tcpdump dst 10.0.0.10_ Shows all traffic on the 10.0.0.0/24 subnet \u00b6 tcpdump net 10.0.0.0./24_","title":"Tcpdump Howto"},{"location":"Tcpdump%20Howto/#tcpdump-howto","text":"","title":"Tcpdump Howto"},{"location":"Tcpdump%20Howto/#shows-traffic-on-interface-eth0-on-port-8080","text":"tcpdump - i eth0 tcp port 8080 - vv - X_ - i interface - vv very verbose output - X show both HEX and ASCII","title":"Shows traffic on interface eth0 on port 8080"},{"location":"Tcpdump%20Howto/#shows-traffic-going-to-or-coming-from-the-host-ip","text":"tcpdump host 10.0.0.10_","title":"Shows traffic going to or coming from the host IP"},{"location":"Tcpdump%20Howto/#shows-traffic-coming-from-100010","text":"tcpdump src 10.0.0.10_","title":"Shows traffic coming from 10.0.0.10"},{"location":"Tcpdump%20Howto/#shows-traffic-going-to-100010","text":"tcpdump dst 10.0.0.10_","title":"Shows traffic going to 10.0.0.10"},{"location":"Tcpdump%20Howto/#shows-all-traffic-on-the-1000024-subnet","text":"tcpdump net 10.0.0.0./24_","title":"Shows all traffic on the 10.0.0.0/24 subnet"},{"location":"TroubleshootingMitto/","text":"Troubleshooting Mitto \u00b6 Primary Steps: \u00b6 Do we have access to this machine? Of so, continue, else try to find out connection info in dropbox paper or the customer's slack channel. If you are researching an error with a job, check the job logs. If this is a UI error or a wizard error, check the JS console and the logs (see below). Mitto Logs: \u00b6 Tail all logs: tail - f - n 1 / var / mitto / log / mitto . log / var / mitto / log / gunicorn . log / var / mitto / log / uwsgi . log / var / mitto / log / scheduler . log / var / mitto / log / auth . log / var / log / nginx / access . log / var / log / nginx / error . log_ Nginx Logs: \u00b6 tail - n 100 - f / var / log / nginx / access . log_ tail - n 100 - f / var / log / nginx / error . log Mitto Logs: \u00b6 tail - n 100 - f / var / mitto / log / mitto . log_ tail - n 100 - f / var / mitto / log / gunicorn . log tail - n 100 - f / var / mitto / log / uwsgi . log tail - n 100 - f / var / mitto / log / scheduler . log tail - n 100 - f / var / mitto / log / auth . log Individual Job Logs: \u00b6 tail - n 100 - f / var / log / mitto / { job_name } . log_ Memory check: \u00b6 sudo grep - i oom / var / log /* log_ sudo fgrep OutOfMemory var / mitto / log /* log Email \u00b6 Troubleshooting Email Mitto Services: \u00b6 sudo systemctl_ sudo systemctl status sudo systemctl status --all Important Services: \u00b6 gunicorn uwsgi waf auth scheduler cron postgresql","title":"TroubleshootingMitto"},{"location":"TroubleshootingMitto/#troubleshooting-mitto","text":"","title":"Troubleshooting Mitto"},{"location":"TroubleshootingMitto/#primary-steps","text":"Do we have access to this machine? Of so, continue, else try to find out connection info in dropbox paper or the customer's slack channel. If you are researching an error with a job, check the job logs. If this is a UI error or a wizard error, check the JS console and the logs (see below).","title":"Primary Steps:"},{"location":"TroubleshootingMitto/#mitto-logs","text":"Tail all logs: tail - f - n 1 / var / mitto / log / mitto . log / var / mitto / log / gunicorn . log / var / mitto / log / uwsgi . log / var / mitto / log / scheduler . log / var / mitto / log / auth . log / var / log / nginx / access . log / var / log / nginx / error . log_","title":"Mitto Logs:"},{"location":"TroubleshootingMitto/#nginx-logs","text":"tail - n 100 - f / var / log / nginx / access . log_ tail - n 100 - f / var / log / nginx / error . log","title":"Nginx Logs:"},{"location":"TroubleshootingMitto/#mitto-logs_1","text":"tail - n 100 - f / var / mitto / log / mitto . log_ tail - n 100 - f / var / mitto / log / gunicorn . log tail - n 100 - f / var / mitto / log / uwsgi . log tail - n 100 - f / var / mitto / log / scheduler . log tail - n 100 - f / var / mitto / log / auth . log","title":"Mitto Logs:"},{"location":"TroubleshootingMitto/#individual-job-logs","text":"tail - n 100 - f / var / log / mitto / { job_name } . log_","title":"Individual Job Logs:"},{"location":"TroubleshootingMitto/#memory-check","text":"sudo grep - i oom / var / log /* log_ sudo fgrep OutOfMemory var / mitto / log /* log","title":"Memory check:"},{"location":"TroubleshootingMitto/#email","text":"Troubleshooting Email","title":"Email"},{"location":"TroubleshootingMitto/#mitto-services","text":"sudo systemctl_ sudo systemctl status sudo systemctl status --all","title":"Mitto Services:"},{"location":"TroubleshootingMitto/#important-services","text":"gunicorn uwsgi waf auth scheduler cron postgresql","title":"Important Services:"},{"location":"instructions/","text":"Instructions for Zuar's mkdocs-material Documentation \u00b6 This describes how to use Zuar's mkdocs-material documentation framework to automatically create public documentation from a repo in Zuar's github organization. Note the use of the word public -- if you follow the Quickstart below, whatever is created will be publicly accessible. Don't worry; mkdocs-material can be use to create private documentation as well. Quickstart \u00b6 In a hurry to create some public documentation with Markdown? Use this template to create a new repository in the Zuar organization. Never created a repository from a template repository before? Here's how . Let's assume your name is Steve and you wanted to create a repo for your personal documentation stash, and that you named your repo usr-steve . On your local system, clone your newly created repo: git clone git@github.com:zuarbase/usr-steve.git Create some sample content: cd usr-steve printf \"# Example Content\\n\\nfoo bar\" > docs/index.md Pull the Docker image for mkdocs-markdown : make pull You only need to do this once. View your documentation: make docs In your browser, navigate to http://0.0.0.0:8000/ and view your work. If you use an editor to modify your documentation, each time you save a file, the view in the browser will be updated to reflect your changes. At this point, you have built documentation locally, but your work has not been committed to your repo, it has not been pushed to github, and the HTML version has not been published. Let's commit your changes and push them to github: git add docs git commit -m'added example documentation' git push When your repo is pushed to github, a workflow is automatically run that builds the HTML version of your documents and publishes them as GitHub Pages. In 30 seconds to a few minutes, Steve's documentation will be publicly viewable at https://zuarbase.github.io/usr-steve/ . The documentation generated by this repo is publicly viewable at https://zuarbase.github.io/mkdocs-template/ . Private Documentation \u00b6 You want to create documentation with MM, but you don't want it to be public? You can still start with this repo as a template. Once you have it locally, run: cd <your-repo-name> git rm .github git commit -m'disable automatic publication of documentation' git push This disables the MM workflow and nothing will be published anywhere. You can continue to develop your documentation locally and view it locally, as described above. If have have another location or web server to which you want your content published, it's simple: make build Your HTML, CSS, and Javascript will be saved in <your-repo-name>/site/ . Simply rsync , scp , or otherwise copy the contents of the site directory to your desired destination. The Details \u00b6 MkDocs and Material for MkDocs are tools that allow one to author attractive, well-organized, and well-presented documentation by creating Markdown files. Writing simple Markdown in text files with any editor allow content creators to focus on content -- not fighting with frustratingly slow WYSIWIG single-page apps that think they know more about what you are doing than you do. Raw Markdown documents (files) are easy to read without any processing. Typically, however, Markdown files are processed to create documents in HTML, PDF, and other formats. MkDocs and Material for MkDocs (hereinafter referred to as MM) do a spectacular job of translation. Because Material for MkDocs is an extension to MkDocs, documentation for the former should always take precedence over the latter. MkDocs uses Python Markdown and Python Markdown Extensions . Material for MkDocs uses the same Python Markdown (confusingly) along with a different Python Markdown Extensions . Material for MkDoc's Python Markdown Extensions are actually based on PyMdown Extensions . Zuar has created a fork of mkdocs-material that contains customizations necessary for producing our internal and external documentation. This has been packaged as a Docker image that can be used as a GitHub workflow . Material for Markdown and the gh-pages workflow have been combined in this template to automatically process and publish Markdown using Zuar's forked Material for Markdown.","title":"Instructions for Zuar's `mkdocs-material` Documentation"},{"location":"instructions/#instructions-for-zuars-mkdocs-material-documentation","text":"This describes how to use Zuar's mkdocs-material documentation framework to automatically create public documentation from a repo in Zuar's github organization. Note the use of the word public -- if you follow the Quickstart below, whatever is created will be publicly accessible. Don't worry; mkdocs-material can be use to create private documentation as well.","title":"Instructions for Zuar's mkdocs-material Documentation"},{"location":"instructions/#quickstart","text":"In a hurry to create some public documentation with Markdown? Use this template to create a new repository in the Zuar organization. Never created a repository from a template repository before? Here's how . Let's assume your name is Steve and you wanted to create a repo for your personal documentation stash, and that you named your repo usr-steve . On your local system, clone your newly created repo: git clone git@github.com:zuarbase/usr-steve.git Create some sample content: cd usr-steve printf \"# Example Content\\n\\nfoo bar\" > docs/index.md Pull the Docker image for mkdocs-markdown : make pull You only need to do this once. View your documentation: make docs In your browser, navigate to http://0.0.0.0:8000/ and view your work. If you use an editor to modify your documentation, each time you save a file, the view in the browser will be updated to reflect your changes. At this point, you have built documentation locally, but your work has not been committed to your repo, it has not been pushed to github, and the HTML version has not been published. Let's commit your changes and push them to github: git add docs git commit -m'added example documentation' git push When your repo is pushed to github, a workflow is automatically run that builds the HTML version of your documents and publishes them as GitHub Pages. In 30 seconds to a few minutes, Steve's documentation will be publicly viewable at https://zuarbase.github.io/usr-steve/ . The documentation generated by this repo is publicly viewable at https://zuarbase.github.io/mkdocs-template/ .","title":"Quickstart"},{"location":"instructions/#private-documentation","text":"You want to create documentation with MM, but you don't want it to be public? You can still start with this repo as a template. Once you have it locally, run: cd <your-repo-name> git rm .github git commit -m'disable automatic publication of documentation' git push This disables the MM workflow and nothing will be published anywhere. You can continue to develop your documentation locally and view it locally, as described above. If have have another location or web server to which you want your content published, it's simple: make build Your HTML, CSS, and Javascript will be saved in <your-repo-name>/site/ . Simply rsync , scp , or otherwise copy the contents of the site directory to your desired destination.","title":"Private Documentation"},{"location":"instructions/#the-details","text":"MkDocs and Material for MkDocs are tools that allow one to author attractive, well-organized, and well-presented documentation by creating Markdown files. Writing simple Markdown in text files with any editor allow content creators to focus on content -- not fighting with frustratingly slow WYSIWIG single-page apps that think they know more about what you are doing than you do. Raw Markdown documents (files) are easy to read without any processing. Typically, however, Markdown files are processed to create documents in HTML, PDF, and other formats. MkDocs and Material for MkDocs (hereinafter referred to as MM) do a spectacular job of translation. Because Material for MkDocs is an extension to MkDocs, documentation for the former should always take precedence over the latter. MkDocs uses Python Markdown and Python Markdown Extensions . Material for MkDocs uses the same Python Markdown (confusingly) along with a different Python Markdown Extensions . Material for MkDoc's Python Markdown Extensions are actually based on PyMdown Extensions . Zuar has created a fork of mkdocs-material that contains customizations necessary for producing our internal and external documentation. This has been packaged as a Docker image that can be used as a GitHub workflow . Material for Markdown and the gh-pages workflow have been combined in this template to automatically process and publish Markdown using Zuar's forked Material for Markdown.","title":"The Details"}]}